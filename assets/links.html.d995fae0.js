import{_ as s,o as a,c as n,e}from"./app.f0c7c707.js";const l={},o=e(`<h1 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h1><p>Links allow you to express relationships between objects, such as a comment&#39;s author (User). You can model <code>1:1</code>, <code>1:n</code>, and <code>n:n</code> relationships with Isar links. Using links is less ergonomic than using embedded objects, and you should use embedded objects whenever possible.</p><p>Think of the link as a separate table that contains the relation. It&#39;s similar to SQL relations but has a different feature set and API.</p><h2 id="isarlink" tabindex="-1"><a class="header-anchor" href="#isarlink" aria-hidden="true">#</a> IsarLink</h2><p><code>IsarLink&lt;T&gt;</code> can contain no or one related object, and it can be used to express a to-one relationship. <code>IsarLink</code> has a single property called <code>value</code> which holds the linked object.</p><p>Links are lazy, so you need to tell the <code>IsarLink</code> to load or save the <code>value</code> explicitly. You can do this by calling <code>linkProperty.load()</code> and <code>linkProperty.save()</code>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>The id property of the source and target collections of a link should be non-final.</p></div><p>For non-web targets, links get loaded automatically when you use them for the first time. Let&#39;s start by adding an IsarLink to a collection:</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@collection</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Id</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> subject;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">@collection</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Id</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> teacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IsarLink</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>We defined a link between teachers and students. Every student can have exactly one teacher in this example.</p><p>First, we create the teacher and assign it to a student. We have to <code>.put()</code> the teacher and save the link manually.</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> mathTeacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;">()..subject </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Math&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> linda </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  ..name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Linda&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ..teacher.value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> mathTeacher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.</span><span style="color:#61AFEF;">writeTxn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.students.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(linda);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.teachers.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(mathTeacher);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> linda.teachers.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre></div><p>We can now use the link:</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> linda </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.students.</span><span style="color:#61AFEF;">where</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">nameEqualTo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Linda&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">findFirst</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> teacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> linda.teacher.value; </span><span style="color:#7F848E;">// &gt; Teacher(subject: &#39;Math&#39;)</span></span>
<span class="line"></span></code></pre></div><p>Let&#39;s try the same thing with synchronous code. We don&#39;t need to save the link manually because <code>.putSync()</code> automatically saves all links. It even creates the teacher for us.</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> englishTeacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;">()..subject </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;English&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> david </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  ..name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;David&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ..teacher.value </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> englishTeacher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">isar.</span><span style="color:#61AFEF;">writeTxnSync</span><span style="color:#ABB2BF;">(() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  isar.students.</span><span style="color:#61AFEF;">putSync</span><span style="color:#ABB2BF;">(david);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="isarlinks" tabindex="-1"><a class="header-anchor" href="#isarlinks" aria-hidden="true">#</a> IsarLinks</h2><p>It would make more sense if the student from the previous example could have multiple teachers. Fortunately, Isar has <code>IsarLinks&lt;T&gt;</code>, which can contain multiple related objects and express a to-many relationship.</p><p><code>IsarLinks&lt;T&gt;</code> extends <code>Set&lt;T&gt;</code> and exposes all the methods that are allowed for sets.</p><p><code>IsarLinks</code> behaves much like <code>IsarLink</code> and is also lazy. To load all linked object call <code>linkProperty.load()</code>. To persist the changes, call <code>linkProperty.save()</code>.</p><p>Internally both <code>IsarLink</code> and <code>IsarLinks</code> are represented in the same way. We can upgrade the <code>IsarLink&lt;Teacher&gt;</code> from before to an <code>IsarLinks&lt;Teacher&gt;</code> to assign multiple teachers to a single student (without losing data).</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@collection</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Id</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> teacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IsarLinks</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>This works because we did not change the name of the link (<code>teacher</code>), so Isar remembers it from before.</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> biologyTeacher </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;">()..subject </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Biology&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> linda </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> isar.students.</span><span style="color:#61AFEF;">where</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">nameEqualTo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Linda&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">findFirst</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(linda.teachers); </span><span style="color:#7F848E;">// {Teacher(&#39;Math&#39;)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">linda.teachers.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(biologyTeacher);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> isar.</span><span style="color:#61AFEF;">writeTxn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> linda.teachers.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(linda.teachers); </span><span style="color:#7F848E;">// {Teacher(&#39;Math&#39;), Teacher(&#39;Biology&#39;)}</span></span>
<span class="line"></span></code></pre></div><h2 id="backlinks" tabindex="-1"><a class="header-anchor" href="#backlinks" aria-hidden="true">#</a> Backlinks</h2><p>I hear you ask, &quot;What if we want to express reverse relationships?&quot;. Don&#39;t worry; we&#39;ll now introduce backlinks.</p><p>Backlinks are links in the reverse direction. Each link always has an implicit backlink. You can make it available to your app by annotating an <code>IsarLink</code> or <code>IsarLinks</code> with <code>@Backlink()</code>.</p><p>Backlinks do not require additional memory or resources; you can freely add, remove and rename them without losing data.</p><p>We want to know which students a specific teacher has, so we define a backlink:</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@collection</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Teacher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">late</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> subject;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@Backlink</span><span style="color:#ABB2BF;">(to</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;teacher&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> student </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">IsarLinks</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>We need to specify the link to which the backlink points. It is possible to have multiple different links between two objects.</p><h2 id="initialize-links" tabindex="-1"><a class="header-anchor" href="#initialize-links" aria-hidden="true">#</a> Initialize links</h2><p><code>IsarLink</code> and <code>IsarLinks</code> have a zero-arg constructor, which should be used to assign the link property when the object is created. It is good practice to make link properties <code>final</code>.</p><p>When you <code>put()</code> your object for the first time, the link gets initialized with source and target collection, and you can call methods like <code>load()</code> and <code>save()</code>. A link starts tracking changes immediately after its creation, so you can add and remove relations even before the link is initialized.</p><div class="custom-container danger"><p class="custom-container-title">Bahaya</p><p>It is illegal to move a link to another object.</p></div>`,35),p=[o];function t(c,r){return a(),n("div",null,p)}const i=s(l,[["render",t],["__file","links.html.vue"]]);export{i as default};

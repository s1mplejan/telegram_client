import{_ as s,o as n,c as a,e as o}from"./app.f0c7c707.js";const l={},p=o(`<h1 id="string-ids" tabindex="-1"><a class="header-anchor" href="#string-ids" aria-hidden="true">#</a> String ids</h1><p>This is one of the most frequent requests I get, so here is a tutorial on using String ids.</p><p>Isar does not natively support String ids, and there is a good reason for it: integer ids are much more efficient and faster. Especially for links, the overhead of a String id is too significant.</p><p>I understand that sometimes you have to store external data that uses UUIDs or other non-integer ids. I recommend storing the String id as a property in your object and using a fast hash implementation to generate a 64-bit int that can be used as Id.</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">@collection</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Id</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isarId</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">fastHash</span><span style="color:#ABB2BF;">(id</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">int</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> age;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>With this approach, you get the best of both worlds: Efficient integer ids for links and the ability to use String ids.</p><h2 id="fast-hash-function" tabindex="-1"><a class="header-anchor" href="#fast-hash-function" aria-hidden="true">#</a> Fast hash function</h2><p>Ideally, your hash function should have high quality (you don&#39;t want collisions) and be fast. I recommend using the following implementation:</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#7F848E;">/// FNV-1a 64bit hash algorithm optimized for Dart Strings</span></span>
<span class="line"><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fastHash</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> string) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> hash </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0xcbf29ce484222325</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> string.length) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> codeUnit </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> string.</span><span style="color:#61AFEF;">codeUnitAt</span><span style="color:#ABB2BF;">(i++);</span></span>
<span class="line"><span style="color:#ABB2BF;">    hash </span><span style="color:#56B6C2;">^=</span><span style="color:#ABB2BF;"> codeUnit </span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    hash </span><span style="color:#56B6C2;">*=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0x100000001b3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    hash </span><span style="color:#56B6C2;">^=</span><span style="color:#ABB2BF;"> codeUnit </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0xFF</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    hash </span><span style="color:#56B6C2;">*=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0x100000001b3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> hash;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>If you choose a different hash function, ensure it returns a 64-bit int and avoid using a cryptographic hash function because they are much slower.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>Avoid using <code>string.hashCode</code> because it is not guaranteed to be stable across different platforms and versions of Dart.</p></div>`,11),e=[p];function t(r,c){return n(),a("div",null,e)}const i=s(l,[["render",t],["__file","string_ids.html.vue"]]);export{i as default};

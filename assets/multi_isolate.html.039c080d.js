import{_ as s,o as a,c as n,e}from"./app.f0c7c707.js";const l={},o=e(`<h1 id="multi-isolate-usage" tabindex="-1"><a class="header-anchor" href="#multi-isolate-usage" aria-hidden="true">#</a> Multi-Isolate usage</h1><p>Instead of threads, all Dart code runs inside isolates. Each isolate has its own memory heap, ensuring that none of the state in an isolate is accessible from any other isolate.</p><p>Isar can be accessed from multiple isolates at the same time, and even watchers work across isolates. In this recipe, we will check out how to use Isar in a multi-isolate environment.</p><h2 id="when-to-use-multiple-isolates" tabindex="-1"><a class="header-anchor" href="#when-to-use-multiple-isolates" aria-hidden="true">#</a> When to use multiple isolates</h2><p>Isar transactions are executed in parallel even if they run in the same isolate. In some cases, it is still beneficial to access Isar from multiple isolates.</p><p>The reason is that Isar spends quite some time encoding and decoding data from and to Dart objects. You can think of it as encoding and decoding JSON (just more efficient). These operations run inside the isolate from which the data is accessed and naturally block other code in the isolate. In other words: Isar performs some of the work in your Dart isolate.</p><p>If you only need to read or write a few hundred objects at once, doing it in the UI isolate is not a problem. But for huge transactions or if the UI thread is already busy, you should consider using a separate isolate.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>The first thing we need to do is to open Isar in the new isolate. Since the instance of Isar is already open in the main isolate, <code>Isar.open()</code> will return the same instance.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>Make sure to provide the same schemas as in the main isolate. Otherwise, you will get an error.</p></div><p><code>compute()</code> starts a new isolate in Flutter and runs the given function in it.</p><div class="language-dart" data-ext="dart"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// Open Isar in the UI isolate</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> isar </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Isar</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">MessageSchema</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    name</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;myInstance&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// listen to changes in the database</span></span>
<span class="line"><span style="color:#ABB2BF;">  isar.messages.</span><span style="color:#61AFEF;">watchLazy</span><span style="color:#ABB2BF;">(() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;omg the messages changed!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// start a new isolate and create 10000 messages</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">compute</span><span style="color:#ABB2BF;">(createDummyMessages, </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isolate finished&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// after some time:</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// &gt; omg the messages changed!</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// &gt; isolate finished</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;">// function that will be executed in the new isolate</span></span>
<span class="line"><span style="color:#E5C07B;">Future</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createDummyMessages</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> count) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// we don&#39;t need the path here because the instance is already open</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> isar </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Isar</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">PostSchema</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    name</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;myInstance&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">final</span><span style="color:#ABB2BF;"> messages </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generate</span><span style="color:#ABB2BF;">(count, (i) =&gt; </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">()..content </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Message $</span><span style="color:#E06C75;">i</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">// we use a synchronous transactions in isolates</span></span>
<span class="line"><span style="color:#ABB2BF;">  isar.</span><span style="color:#61AFEF;">writeTxnSync</span><span style="color:#ABB2BF;">(() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    isar.messages.</span><span style="color:#61AFEF;">insertAllSync</span><span style="color:#ABB2BF;">(messages);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>There are a few interesting things to note in the example above:</p><ul><li><code>isar.messages.watchLazy()</code> is called in the UI isolate and is notified of changes from another isolate.</li><li>Instances are referenced by name. The default name is <code>default</code>, but in this example, we set it to <code>myInstance</code>.</li><li>We used a synchronous transaction to create the mesasges. Blocking our new isolate is no problem, and synchronous transactions are a little faster.</li></ul>`,14),p=[o];function t(c,r){return a(),n("div",null,p)}const B=s(l,[["render",t],["__file","multi_isolate.html.vue"]]);export{B as default};
